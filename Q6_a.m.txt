% Reading the Images
I1 = imread("goi1.jpg");
I2 = imread("goi2_downsampled.jpg");

% Converting the Images to Double Precision
I1 = double(I1); 
I2 = double(I2);

% storing them in img1 and img2 variables
img1 = I1;
img2 = I2;

n = 12;  % Number of corresponding points to select
% initializing the arrays to store correspong x and y coordinates of image
% 1 and image 2
x_1 = zeros(n, 1);  
y_1 = zeros(n, 1); 
x_2 = zeros(n, 1);  
y_2 = zeros(n, 1); 

for i = 1:n
    figure(1); imshow(img1/255); 
    title('Select a point in the first image');
    % using ginput function to select points in the image
    [x_1(i), y_1(i)] = ginput(1);  

    figure(2); imshow(img2/255);  
    title('Select the corresponding point in the second image');
    [x_2(i), y_2(i)] = ginput(1);   
end
% plotting the images with selected points for clarith
figure(1); imshow(img1/255);
hold on;
plot(x_1, y_1, 'ro', 'MarkerSize', 10);
title('Selected points on the first image');

figure(2); imshow(img2/255);
hold on;
plot(x_2, y_2, 'ro', 'MarkerSize', 10);
title('Selected points on the second image');

A = zeros(2 * n, 6);
b = zeros(2 * n, 1);
% writing the equations into matrix form so that we can use mean square
% minimisation to find the best fit parameters for affine transformations
for i = 1:n
    A(2*i-1, :) = [x_1(i), y_1(i), 1, 0, 0, 0];
    A(2*i, :) = [0, 0, 0, x_1(i), y_1(i), 1];
    b(2*i-1) = x_2(i);
    b(2*i) = y_2(i);
end

% Psedo inverse function used to extract affine parameters
parameters = pinv(A) * b;

% Extract the affine transformation matrix
affine_matrix = [parameters(1), parameters(2), parameters(3);
                 parameters(4), parameters(5), parameters(6);
                 0, 0, 1];
transform = affine2d(affine_matrix');
I1_warped = imwarp(I1, transform, 'OutputView', imref2d(size(I2)));

% Displaying the original, second, and warped images side by side
figure;
subplot(1, 3, 1); imshow(uint8(I1)); title('Original Image 1');
subplot(1, 3, 2); imshow(uint8(I2)); title('Original Image 2');
subplot(1, 3, 3); imshow(uint8(I1_warped)); title('Warped Image 1 to Image 2');

% to validate results we are overlaying images
imshowpair(I1_warped / 255, I2 / 255, 'blend');
title('Overlay of Transformed Image and Original Image');
A = affine_matrix(1:2, 1:2);
b = affine_matrix(1:2, 3);


[rows2, cols2, ~] = size(I2);


I1_warped = zeros(size(I2));

% Nearest Neighbor Interpolation
% reverse warping
for i = 1:rows2
    for j = 1:cols2
        % Map the pixel coordinates in the target image to the source image
        source_coords = inv(affine_matrix) * [j; i; 1];
        x = round(source_coords(1));
        y = round(source_coords(2));
        
        % Check bounds and assign pixel value
        if x >= 1 && x <= size(I1, 2) && y >= 1 && y <= size(I1, 1)
            I1_warped(i, j, :) = I1(y, x, :);
        end
    end
end
% showing all three images

figure;
subplot(1, 3, 1); imshow(uint8(I1)); title('Original Image 1');
subplot(1, 3, 2); imshow(uint8(I2)); title('Original Image 2');
subplot(1, 3, 3); imshow(uint8(I1_warped)); title('Warped Image 1 to Image 2');

% Displaying the warped image and original image using Nearest Neighbor Interpolation
figure;
imshow(I2, 'DisplayRange', [0, 255]);
hold on;
h = imshow(I1_warped, 'DisplayRange', [0, 255]);
set(h, 'AlphaData', 0.5);
title('Warped Image 1 with Nearest Neighbor Interpolation on Image 2');
hold off;
A = affine_matrix(1:2, 1:2);
b = affine_matrix(1:2, 3);


[rows2, cols2, num_channels] = size(I2); 


I1_warped = zeros(size(I2));


for i = 1:rows2
    for j = 1:cols2
        % Map target image coordinates to source image coordinates
        source_coords = affine_matrix \ [j; i; 1];
        x = source_coords(1);
        y = source_coords(2);
        
        % Perform bilinear interpolation if the coordinates are within bounds
        if x >= 1 && x <= size(I1, 2) && y >= 1 && y <= size(I1, 1)
            % Get the floor and ceiling values
            x1 = floor(x);
            x2 = ceil(x);
            y1 = floor(y);
            y2 = ceil(y);
            
            % Ensure coordinates are within bounds
            x1 = max(min(x1, size(I1, 2)), 1);
            x2 = max(min(x2, size(I1, 2)), 1);
            y1 = max(min(y1, size(I1, 1)), 1);
            y2 = max(min(y2, size(I1, 1)), 1);
            
            % Compute weights
            wx2 = x - x1;
            wx1 = 1 - wx2;
            wy2 = y - y1;
            wy1 = 1 - wy2;
            
            % Compute interpolated value for each channel
            for c = 1:num_channels
                I1_warped(i, j, c) = ...
                    wx1 * wy1 * I1(y1, x1, c) + ...
                    wx2 * wy1 * I1(y1, x2, c) + ...
                    wx1 * wy2 * I1(y2, x1, c) + ...
                    wx2 * wy2 * I1(y2, x2, c);
            end
        end
    end
end
figure;
subplot(1, 3, 1); imshow(uint8(I1)); title('Original Image 1');
subplot(1, 3, 2); imshow(uint8(I2)); title('Original Image 2');
subplot(1, 3, 3); imshow(uint8(I1_warped)); title('Warped Image 1 to Image 2');


% Displaying the warped image and original image using bilinear Interpolation
figure;
imshow(I2 / 255, 'DisplayRange', [0, 1]); 
hold on;
h = imshow(I1_warped / 255, 'DisplayRange', [0, 1]);
set(h, 'AlphaData', 0.5);
title('Warped Image I1 with Bilinear Interpolation on Image I2');
hold off;
